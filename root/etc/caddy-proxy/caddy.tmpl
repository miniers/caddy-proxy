import /root/.caddy/vhosts/*
{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "proxy_vhost" }}
  {{ if .Address }}
    {{ if and .Container.Node.ID .Address.HostPort }}
  ## Using container IP:PORT
  proxy / {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }} {
    transparent
    header_upstream Host {host}
    header_upstream X-Real-IP {remote}
    header_upstream X-Forwarded-For {remote}
    header_upstream X-Forwarded-Proto {scheme}
  }
    {{ else if .Network }}
  ## Using Network IP:PORT
  proxy / {{ .Network.IP }}:{{ .Address.Port }} {
    transparent
    header_upstream Host {host}
    header_upstream X-Real-IP {remote}
    header_upstream X-Forwarded-For {remote}
    header_upstream X-Forwarded-Proto {scheme}
  }
    {{ end }} 
  {{ else if .Network }}
  ## Using fallback to Network IP:80
  ## "{{ .Container.Name }}"
  proxy / {{ .Network.IP }} {
    transparent
    header_upstream Host {host}
    header_upstream X-Real-IP {remote}
    header_upstream X-Forwarded-For {remote}
    header_upstream X-Forwarded-Proto {scheme}
  }
  {{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ $host }} {
{{ range $container := $containers }}
  ## $container.Name: "{{ $container.Name }}"
  {{ $addrLen := len $container.Addresses }}
  {{ range $knownNetwork := $CurrentContainer.Networks }}
    {{ range $containerNetwork := $container.Networks }}
      {{ if eq $knownNetwork.Name $containerNetwork.Name }}

        {{ if $container.Env.VIRTUAL_HOST_BASIC_AUTH  }}
    basicauth {{ $container.Env.VIRTUAL_HOST_BASIC_AUTH }}
        {{ end }}
        {{ if $container.HostEnv.DNSPOD_API_KEY }}
    tls {
      dns dnspod
    }
        {{ end }}
        {{/* If only 1 port exposed, use that */}}
        {{ if eq $addrLen 1 }}
  {{ $address := index $container.Addresses 0 }}
  {{ template "proxy_vhost" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
        {{ else }}
  {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
  {{ $address := where $container.Addresses "Port" $port | first }}
  {{ template "proxy_vhost" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
        {{ end }}

        {{ $extraconfig := $container.Env.VIRTUAL_HOST_EXTRA_CONFIG }}
        {{ if $extraconfig }}
  {{ $extraconfig }}
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
  log stdout
  errors stdout
}
{{ end }}